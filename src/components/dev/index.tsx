import { FC } from 'react';
import cn from 'classnames';
import { DevProps } from './dev.types';
import {
  AccessibilityClasses,
  BgClasses,
  BorderClasses,
  EffectClasses,
  FilterClasses,
  FlexGridClasses,
  InteractivityClasses,
  LayoutClasses,
  SizingClasses,
  SpacingClasses,
  SVGClasses,
  TableClasses,
  TransformClasses,
  TransitionClasses,
  TypographyClasses
} from '../../utils/classes';
import { motion } from 'framer-motion';
import { Link } from 'react-router-dom';
export * from './dev.types';

export const Dev: FC<DevProps> = ({
  type,
  alignContent,
  alignItems,
  alignSelf,
  animation,
  aspectRatio,
  backdropBlur,
  backdropBrightness,
  backdropContrast,
  backdropGrayscale,
  backdropHueRotate,
  backdropInvert,
  backdropOpacity,
  backdropSaturate,
  backdropSepia,
  bgBlend,
  blur,
  borderPalette,
  borderPaletteStop,
  borderRadius,
  borderStyle,
  borderWidth,
  bottom,
  boxDecoration,
  boxShadow,
  boxShadowPalette,
  boxShadowPaletteStop,
  boxSizing,
  breakAfter,
  breakBefore,
  breakInside,
  brightness,
  centerSelf,
  children,
  classes,
  clear,
  columns,
  container,
  twContent,
  contrast,
  display,
  dividePalette,
  dividePaletteStop,
  divideStyle,
  divideWidth,
  dropShadow,
  flex,
  flexBasis,
  flexDirection,
  flexGrow,
  flexShrink,
  flexWrap,
  float,
  font,
  fontSmoothing,
  fullscreen,
  gap,
  grayscale,
  gridAutoCols,
  gridAutoFlow,
  gridAutoRows,
  gridColSize,
  gridCols,
  gridRowSize,
  gridRows,
  height: height,
  hueRotate,
  inset,
  invert,
  isolation,
  justifyContent,
  justifyItems,
  justifySelf,
  left,
  listStylePosition,
  listStyleType,
  margin,
  maxHeight,
  maxWidth,
  minHeight,
  minWidth,
  mixBlend,
  objectFit,
  objectPosition,
  opacity,
  order,
  outlineOffset,
  outlinePalette,
  outlinePaletteStop,
  outlineStyle,
  outlineWidth,
  overflow,
  overscroll,
  padding,
  placeContent,
  placeItems,
  placeSelf,
  position,
  prose,
  right,
  ringOffsetPalette,
  ringOffsetPaletteStop,
  ringOffsetWidth,
  ringPalette,
  ringPaletteStop,
  ringWidth,
  saturate,
  sepia,
  spaceBetween,
  textAlign,
  textOverflow,
  textPalette,
  textPaletteStop,
  textTransform,
  theme,
  to,
  top,
  transitionDelay,
  transitionDuration,
  transitionEase,
  transitionProperty,
  verticalAlign,
  visibility,
  whitespace,
  width,
  wordBreak,
  zIndex,
  fontSize,
  fontStyle,
  fontWeight,
  fontVariantNumeric,
  letterSpacing,
  lineClamp,
  lineHeight,
  textDecoration,
  textDecorationPalette,
  textDecorationPaletteStop,
  textDecorationStyle,
  textDecorationThickness,
  textUnderlineOffset,
  textIndent,
  bgScroll,
  bgClip,
  bgPalette,
  bgPaletteStop,
  bgOrigin,
  bgPosition,
  bgRepeat,
  bgSize,
  bgImage,
  gradientDirection,
  gradientPaletteStop,
  gradientFrom,
  gradientTo,
  gradientVia,
  borderCollapse,
  borderSpacing,
  tableLayout,
  scale,
  rotate,
  translateElement,
  skew,
  transform,
  transformOrigin,
  accentPalette,
  accentPaletteStop,
  appearance,
  cursor,
  caretPalette,
  caretPaletteStop,
  pointerEvents,
  resize,
  scrollBehavior,
  scrollMargin,
  scrollPadding,
  scrollSnapAlign,
  scrollSnapStop,
  scrollSnapType,
  touchAction,
  userSelect,
  willChange,
  fillPalette,
  fillPaletteStop,
  strokePalette,
  strokePaletteStop,
  strokeWidth,
  screenReaders,
  themeInverse,
  inversePaletteStop,
  element,
  ...props
}) => {
  const classNames = cn(
    BorderClasses({
      borderPalette,
      borderPaletteStop,
      borderRadius,
      borderStyle,
      borderWidth,
      dividePalette,
      dividePaletteStop,
      divideStyle,
      divideWidth,
      outlineOffset,
      outlinePalette,
      outlinePaletteStop,
      outlineStyle,
      outlineWidth,
      ringOffsetPalette,
      ringOffsetPaletteStop,
      ringOffsetWidth,
      ringPalette,
      ringPaletteStop,
      ringWidth
    }),
    EffectClasses({
      boxShadow,
      boxShadowPalette,
      boxShadowPaletteStop,
      opacity,
      mixBlend,
      bgBlend
    }),
    FilterClasses({
      blur,
      brightness,
      contrast,
      dropShadow,
      grayscale,
      hueRotate,
      invert,
      saturate,
      sepia,
      backdropBlur,
      backdropBrightness,
      backdropContrast,
      backdropGrayscale,
      backdropHueRotate,
      backdropInvert,
      backdropOpacity,
      backdropSaturate,
      backdropSepia
    }),
    SizingClasses({
      width: width,
      minWidth,
      maxWidth,
      height,
      minHeight,
      maxHeight
    }),
    TransitionClasses({
      transitionProperty,
      transitionDuration,
      transitionEase,
      transitionDelay,
      animation
    }),
    TypographyClasses({
      font,
      fontSize,
      fontSmoothing,
      fontStyle,
      fontWeight,
      fontVariantNumeric,
      letterSpacing,
      lineClamp,
      lineHeight,
      listStyleType,
      listStylePosition,
      textAlign,
      textPalette,
      textPaletteStop,
      textDecoration,
      textDecorationPalette,
      textDecorationPaletteStop,
      textDecorationStyle,
      textDecorationThickness,
      textUnderlineOffset,
      textTransform,
      textOverflow,
      textIndent,
      verticalAlign,
      whitespace,
      wordBreak,
      twContent,
      prose
    }),
    LayoutClasses({
      aspectRatio,
      bottom,
      boxDecoration,
      boxSizing,
      breakAfter,
      breakBefore,
      breakInside,
      centerSelf,
      clear,
      columns,
      container,
      display,
      float,
      fullscreen,
      inset,
      isolation,
      left,
      objectFit,
      objectPosition,
      overflow,
      overscroll,
      position,
      right,
      top,
      visibility,
      zIndex
    }),
    FlexGridClasses({
      flexBasis,
      flexDirection,
      flexWrap,
      flex,
      flexGrow,
      flexShrink,
      order,
      gridCols,
      gridColSize,
      gridRows,
      gridRowSize,
      gridAutoFlow,
      gridAutoCols,
      gridAutoRows,
      gap,
      justifyContent,
      justifyItems,
      justifySelf,
      alignContent,
      alignItems,
      alignSelf,
      placeContent,
      placeItems,
      placeSelf
    }),
    SpacingClasses({
      margin,
      padding,
      spaceBetween
    }),
    BgClasses({
      bgScroll,
      bgClip,
      bgPalette,
      bgPaletteStop,
      bgOrigin,
      bgPosition,
      bgRepeat,
      bgSize,
      bgImage,
      gradientDirection,
      gradientPaletteStop,
      gradientFrom,
      gradientTo,
      gradientVia,
      themeInverse,
      inversePaletteStop
    }),
    TableClasses({
      borderCollapse,
      borderSpacing,
      tableLayout
    }),
    TransformClasses({
      scale,
      rotate,
      translateElement,
      skew,
      transform,
      transformOrigin
    }),
    InteractivityClasses({
      accentPalette,
      accentPaletteStop,
      appearance,
      cursor,
      caretPalette,
      caretPaletteStop,
      pointerEvents,
      resize,
      scrollBehavior,
      scrollMargin,
      scrollPadding,
      scrollSnapAlign,
      scrollSnapStop,
      scrollSnapType,
      touchAction,
      userSelect,
      willChange
    }),
    SVGClasses({
      fillPalette,
      fillPaletteStop,
      strokePalette,
      strokePaletteStop,
      strokeWidth
    }),
    AccessibilityClasses({
      screenReaders
    }),
    classes
  );

  const ElementToRender =
    element === 'button'
      ? motion.button
      : element === 'a'
      ? motion.a
      : element === 'input'
      ? motion.input
      : element === 'form'
      ? motion.form
      : element === 'table'
      ? motion.table
      : motion.span;
  return to ? (
    <Link type={type as string} to={to} className={classNames} {...props}>
      {children}
    </Link>
  ) : (
    <ElementToRender
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      type={type as any}
      data-theme={theme}
      className={classNames}
      {...props}>
      {children}
    </ElementToRender>
  );
};
